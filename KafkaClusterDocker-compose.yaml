version: '3.8'
services:

#  Минимальный кластер:
#    3 брокера:
#  Подходит для небольших продакшен-приложений с умеренной нагрузкой.
#  Конфигурация:
#  replication.factor=3 для топиков.
#  min.insync.replicas=2 для обеспечения записи на минимум 2 реплики.
#  3 узла с ролями broker,controller (как в вашем случае) или отдельные контроллеры.
#  Пример: Ваш текущий docker-compose.yml можно расширить до трёх брокеров (см. пример ниже).
#  Оптимальный кластер:
#    5-7 брокеров:
#  Подходит для большинства продакшен-сред с высокой нагрузкой и требованиями к отказоустойчивости.
#  Позволяет выдержать 2 сбоя брокеров.
#  Обеспечивает лучшую балансировку партиций и производительность.
#  Крупный кластер:
#    9+ брокеров:
#  Для высоконагруженных систем (например, стриминг, IoT, аналитика).
#  Требует тщательного планирования: больше брокеров увеличивает сложность управления и координации.
#  Контроллеры в KRaft:
#  В продакшене рекомендуется минимум 3 контроллера для кворума.
#  Вы можете совмещать роли (broker,controller, как у вас) на 3-5 брокерах или выделить отдельные узлы для контроллеров (например, 3 контроллера и 5 брокеров).
#  Пример:
#    KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'

  kafka1:
    image: apache/kafka:3.9.1
    container_name: kafka1
    ports:
      - "9094:19092"  # EXTERNAL listener Kafka брокеры слушают на порту 19092 внутри контейнера (EXTERNAL listener)
      - "9095:9093"   # CONTROLLER (только для отладки в production рекомендуется использовать SSL)
#      используется для внутренней связи между контроллерами Kafka в режиме KRaft (Kafka Raft Metadata Mode) Каждый контроллер подключается к другим через этот порт.

    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
#      Включает автоматическое создание топиков при отправке сообщений в несуществующий топик или подписке консьюмера.

      KAFKA_NUM_PARTITIONS: 3
#      Новые топики будут создаваться с 3 партициями по умолчанию. Это разумное значение для небольшого кластера, обеспечивающее параллелизм.
#      Если не ставить по умолчанию топик будет создаваться с 1 партицией

      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
#      Новые топики будут создаваться с репликацией 3, что означает, что каждая партиция будет иметь копии на всех трёх брокерах. Это обеспечивает отказоустойчивость (кластер выдержит сбой двух брокеров).

      KAFKA_KRAFT_CLUSTER_ID: "fACyZ_cqRjyDWWyLbSKp-Q"
#      Уникальный идентификатор кластера для KRaft. Он одинаков для всех брокеров, что правильно, так как они формируют один кластер.

      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
#      Каждый брокер выполняет роли брокера и контроллера, что подходит для минимального кластера из трёх брокеров. Это упрощает настройку, но в более крупных кластерах (5+ брокеров) рекомендуется выделить отдельные контроллеры.

      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093
#      Каждый брокер слушает на портах 9092 для клиентских подключений (INTERNAL) и 9093 для связи контроллеров (CONTROLLER). EXTERNAL (19092):Использует другой порт, чтобы не конфликтовать с INTERNAL

      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:9094,CONTROLLER://kafka1:9093
#      Это адреса, которые клиенты (продюсеры, консьюмеры) используют для подключения. Они уникальны для каждого брокера и соответствуют маппингу портов.

      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
#      Используется незащищённый протокол (PLAINTTEXT), что подходит для разработки или внутренней сети. В продакшене рекомендуется использовать SSL для безопасности.

      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
#      Указывает имя слушателя для контроллера, что соответствует KAFKA_LISTENERS.

      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093
#      Определяет кворум контроллеров. Все три брокера участвуют в кворуме, что обеспечивает отказоустойчивость (кластере может выдержать сбой одного брокера).

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
#      Системный топик __consumer_offsets (для хранения смещений консьюмеров) имеет репликацию 3, что обеспечивает надёжность.

      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10000
#      Задержка 10 секунд перед началом ребалансировки групп консьюмеров. Это уменьшает частоту ребалансировок при переподключении консьюмеров.

      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
#      Минимум 2 реплики должны быть синхронизированы для подтверждения транзакций. Это обеспечивает баланс между надёжностью и производительностью.

      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
#      Системный топик для транзакций имеет репликацию 3, что подходит для надёжности.

      KAFKA_LOG_RETENTION_HOURS: 168
#      Установлено время хранения сообщений (7 дней)

      KAFKA_LOG4J_LOGGERS: kafka=INFO,org.apache.kafka=INFO
#     Установлен уровень INFO для логов Kafka, чтобы упростить мониторинг и отладку без избыточного вывода.

      KAFKA_HEAP_OPTS: -Xmx2g -Xms1g
#     для явного контроля памяти JVM, чтобы избежать перегрузки.

      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka1_data:/var/lib/kafka/data
#      - kafka_streams_data:/data/kafka-streams
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
#    Ограничивает CPU (1 ядро) и память (2 ГБ) для каждого брокера, чтобы предотвратить перегрузку хоста. Зарезервировано 0.5 CPU и 1 ГБ для минимальной работы.
#  Типичные требования для продакшен-брокера:
#  CPU: 1-2 ядра для умеренной нагрузки (до 10-20 МБ/с трафика, 100-1000 партиций на брокер).
#  Память: 4-8 ГБ, из которых 2-4 ГБ для JVM heap (-Xmx), остальное для кэша ОС (Kafka активно использует page cache для I/O).
#  Диск: SSD для высокой производительности I/O, особенно при репликации.
#  Сеть: Высокая пропускная способность (1 Гбит/с и выше) для передачи данных между брокерами и клиентами.

  kafka2:
    image: apache/kafka:3.9.1
    container_name: kafka2
    ports:
      - "9096:19092"  # EXTERNAL listener
      - "9097:9093"   # CONTROLLER
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_KRAFT_CLUSTER_ID: "fACyZ_cqRjyDWWyLbSKp-Q"
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka2:9092,EXTERNAL://localhost:9096,CONTROLLER://kafka2:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10000
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG4J_LOGGERS: "kafka=INFO,org.apache.kafka=INFO"
      KAFKA_HEAP_OPTS: "-Xmx2g -Xms1g"

      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka2_data:/var/lib/kafka/data
#      - kafka_streams_data:/data/kafka-streams
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  kafka3:
    image: apache/kafka:3.9.1
    container_name: kafka3
    ports:
      - "9098:19092"  # EXTERNAL listener
      - "9099:9093"   # CONTROLLER
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_KRAFT_CLUSTER_ID: "fACyZ_cqRjyDWWyLbSKp-Q"
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: "INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:19092,CONTROLLER://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka3:9092,EXTERNAL://localhost:9098,CONTROLLER://kafka3:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 10000
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG4J_LOGGERS: "kafka=INFO,org.apache.kafka=INFO"
      KAFKA_HEAP_OPTS: "-Xmx2g -Xms1g"

      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka3_data:/var/lib/kafka/data
#      - kafka_streams_data:/data/kafka-streams
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

networks:
  kafka-network:
    name: kafka-network

volumes:
  kafka1_data:
  kafka2_data:
  kafka3_data:
  kafka_streams_data:
